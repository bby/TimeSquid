package com.label.timesquid{	import flash.events.Event;	import flash.net.SharedObject;	import com.label.timesquid.*;	import com.label.timesquid.bill.*;	import com.label.arduino.*;	import com.label.arduino.sensor.*;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import fl.transitions.Fade;	import flash.text.TextField;	import flash.desktop.NativeProcess;	import flash.desktop.NativeProcessStartupInfo;	import flash.desktop.NativeProcess;	import flash.events.ProgressEvent;	import flash.filesystem.File;	import flash.system.Capabilities;	import flash.events.IOErrorEvent;	public class TimeSquid extends MovieClip	{		public var rabbit_anim:MovieClip;		public var mary:MovieClip;		public var hit_area:MovieClip;		public var billArm:com.label.timesquid.bill.Arm;		public var startButton:MovieClip;		public var armCalibButton:MovieClip;		public var handCalibButton:MovieClip;		public var startSceneButton:MovieClip;		public var startTinkerButton:MovieClip;		public var stopTinkerButton:MovieClip;		public var saveButton:MovieClip;		public var configButton:MovieClip;		public var calibrator:Calibrator;		public var configClip:Config;		var process:NativeProcess;		var em:EventManager;		var armSensor:FlexSensor;		var handSensor:FlexSensor;		public var mouth:Mouth;		public function TimeSquid()		{			stop();			//Set button names			startButton.buttonText.text = "Start Listener";			armCalibButton.buttonText.text = "Arm Calibration";			handCalibButton.buttonText.text = "Hand Calibration";			startSceneButton.buttonText.text = "Start";			saveButton.buttonText.text = "Save Calibration";			startTinkerButton.buttonText.text = "Start Proxy";			stopTinkerButton.buttonText.text = "Stop Proxy";			startTinkerButton.addEventListener(MouseEvent.CLICK, launchProxy);			configButton.addEventListener(MouseEvent.CLICK, config);			armCalibButton.alpha = 0.5;			handCalibButton.alpha = 0.5;			startSceneButton.alpha = 0.5;			saveButton.alpha = 0.5;			startButton.alpha = 0.5;			stopTinkerButton.alpha = 0.5;		}		protected function launchProxy(e:Event):void		{			if (NativeProcess.isSupported)			{								this.launchListener();				startButton.addEventListener(MouseEvent.CLICK, setup);				startButton.alpha = 1;				stopTinkerButton.addEventListener(MouseEvent.CLICK, closeProxy);				stopTinkerButton.alpha = 1;			}			else			{			}		}		protected function launchListener()		{			var file:File = File.applicationDirectory;			file = file.resolvePath("NativeApps");						if (Capabilities.os.toLowerCase().indexOf("win") > -1)			{				file = file.resolvePath("script/windows/bin/echoTestWin.exe");			}			else if (Capabilities.os.toLowerCase().indexOf("mac") > -1)			{				file = file.resolvePath("script/mac/serproxy.osx");							}						var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();			nativeProcessStartupInfo.executable = file;						var args:Vector.<String> = new  Vector.<String>();			so = getSharedObject();			trace(so.data.serialVal);			args.push(so.data.serialVal);			nativeProcessStartupInfo.arguments = args;			process = new NativeProcess();			process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onNativeOutputData);			process.addEventListener(ProgressEvent.STANDARD_INPUT_PROGRESS, onInputProgressListener);			process.start(nativeProcessStartupInfo);			//process.standardInput.writeUTF("ASDSADSAD\n");			process.closeInput();			trace("\nRESULT:"+process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable));		}		public function closeProxy(e:Event):void		{			trace("CLOSING!!!!!|");			if (process != null)			{				process.exit(true);			}		}		public function onNativeOutputData(e:ProgressEvent):void		{			trace("\nNativeOutput: "+e);		}		public function onInputProgressListener(e:ProgressEvent):void		{			trace("\nRESULT:"+process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable));		}		public function config(e:Event):void		{			if (configClip != null)			{				this.removeChild(configClip);				configClip = null;			}			//Add to movie clip			configClip = new Config();			this.addChild(configClip);			loadConfig();			//Centre			configClip.x = 400;			configClip.y = 300;			//Add Listeners			configClip.addEventListener(Event.CLOSE, closeConfig);		}		public function closeConfig(e:Event):void		{			if (configClip != null)			{				saveConfig();				this.removeChild(configClip);				configClip = null;			}		}		//Set up sensors;		public function setup(e:Event):void		{			var TEST_MODE:Boolean = false;			armSensor = new FlexSensor();			armSensor.setCalibration(100, 100);			handSensor = new FlexSensor();			handSensor.setCalibration(100, 100);			//Load any existing data;			loadData();			em = EventManager.getInstance();			em.initialize("127.0.0.1", 5331);			em.setTestMode(TEST_MODE);			//Set up Sensors			em.registerAnalogueSensor(armSensor, 3);			em.registerAnalogueSensor(handSensor, 4);			em.connect();			if (TEST_MODE)			{				this.addEventListener(Event.ENTER_FRAME, em.test);			}			//Enable calibrators			armCalibButton.alpha = 1;			handCalibButton.alpha = 1;			startSceneButton.alpha = 1;			saveButton.alpha = 1;			armCalibButton.addEventListener(MouseEvent.CLICK, startArmCalibration);			handCalibButton.addEventListener(MouseEvent.CLICK, startHandCalibration);			startSceneButton.addEventListener(MouseEvent.CLICK, startScene);			saveButton.addEventListener(MouseEvent.CLICK, saveData);		}		public function addSensorListeners()		{			armSensor.addEventListener(SensorEvent.NEW_VALUE, billArm.sensorEvent);			handSensor.addEventListener(SensorEvent.NEW_VALUE, billArm.bills_hand.sensorEvent);		}		protected function initCalibrator(sensor:FlexSensor):void		{			if (calibrator != null)			{				this.removeChild(calibrator);				var tempSensor = calibrator.sensor;				if (tempSensor != null)				{					sensor.removeEventListener(SensorEvent.NEW_VALUE, calibrator.sensorEvent);				}				calibrator = null;			}			//Add to movie clip			calibrator = new Calibrator(sensor);			this.addChild(calibrator);			//Centre			calibrator.x = 400;			calibrator.y = 300;			//Add Listeners			sensor.addEventListener(SensorEvent.NEW_VALUE, calibrator.sensorEvent);			calibrator.addEventListener(Event.CLOSE, closeCalibrator);		}		protected function startArmCalibration(e:Event):void		{			this.initCalibrator(armSensor);		}		protected function startHandCalibration(e:Event):void		{			this.initCalibrator(handSensor);		}		/**		 * Closes the calibrator		 */		protected function closeCalibrator(e:Event):void		{			if (calibrator != null)			{				this.removeChild(calibrator);				calibrator = null;			}		}		/**		 * Starts the animation scene		 */		protected function startScene(e:Event):void		{			trace("START");			this.gotoAndStop("scene");		}		/**		 * Called by AS in the Scene Frame		 */		protected function sceneStarted():void		{			trace("Scene Started");			addSensorListeners();			//Hide rabbit			rabbit_anim.visible = false;			//Init Mouth			mouth.setup();		}		/**		  * Stores calibration data into flash cookie		  */		protected function saveData(e:Event):void		{			so = getSharedObject();			trace("Saving data");			so.data.handMax = handSensor.max;			so.data.handMin = handSensor.min;			so.data.armMax = armSensor.max;			so.data.armMin = armSensor.min;			so.flush();		}		protected function loadData():void		{			so = getSharedObject();			if (so.data.handMax != null && so.data.handMin != null)			{				handSensor.setCalibration(so.data.handMin, so.data.handMax);			}			if (so.data.armMax != null && so.data.armMin != null)			{				armSensor.setCalibration(so.data.armMin, so.data.armMax);			}		}		protected function getSharedObject()		{			return SharedObject.getLocal("timesquid");;		}		protected function loadConfig()		{			so = getSharedObject();			if (configClip != null)			{				trace("so.data.serialVal", so.data.serialVal);				configClip.serialVal.text = so.data.serialVal;			}		}		protected function saveConfig()		{			so = getSharedObject();			if (configClip != null)			{				so.data.serialVal = configClip.serialVal.text;			}		}	}}